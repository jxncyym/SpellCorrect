读S计划- C方向项目详细计划一位网友的建议，写的非常好：

对《C方向项目详细计划》的一点建议




   


   特别声明：下面的群满了，加入78306952，或者CSDN群组



   


   如果要加入此计划:





   1、
方式1
：加入
QQ
群：

93684322
。




   2、
方式2
：加入
CSDN
群组：

DS计划



。



   



前言



   此
详细计划
的内容主要
包括：




   1、
全年规划




   2、
面向对象




   3、
内容范围。




   4、
主要资料。




   5、
知识点划分。




   6、
组织形式。




   7、
时间计划。




   


   第二项内容，
发布两个初始项目的具体运作模式，接受成员报名。这个发布，主要的内容是决定具体的平台，以及如何使用此平台来完成项目的运作。




   


   作为
第一个项目，刚开始的时候，有我们各自担任PO
，在项目的运行过程中，尽量的使之成为自组织的团队。渐渐的减少我们对项目运行的干预。使项目尽早的开始独立运行。




   




全年规划



   读S
计划第一期总时长为一年，大概从
2009
年
11
月起，到
2010
年
10
月止。其中，最后三个月要留出来，与参加

JAAVWEB
方向学习的朋友们共同阅读《代码大全》的部分内容，所以，实际的学习时间为9
个月。





   按照&ldquo;读S
计划&rdquo;的设想，学习内容都按照项目方式来组织，

c
方向，一共有
三个
项目，总体安排如下表所示：









   项目






   周期






   主要学习资料









   C语言深入学习







   20
周






   《c
缺陷和陷阱》，《
c
和指针》，《
c
专家编程》










   编程规范






   5
周






   华为的《编程规范教程》









   Linux程序开发







   15
周






   《Linux
程序设计》第三版









   


   

面向的
对象



   第一个项目是一个
实验
型项目，主要的目的是探索一个科学的、可行的项目运作模式。第一个项目主要针对有一定c
语言基础的在校学生，

以及
刚刚毕业的应届毕业生。如果你没有一定的c
语言基础，也没有关系，只要你对
c
语言感兴趣，你完全可以

一边
学习基础，一遍深入学习（只要你有足够的兴趣和精力）。



   


   



内容范围。



   第一c
的项目

名称
是
&mdash;&mdash;
《
C
语言深入学习》。




   原因：
大学的c语言课程讲授的c的知识相对来说比较基础，对付考级尚可，但是，要真正的做产品开发，还有一大段的距离。C语言有很多特性，都是隐藏的比较深的。举例来说，&ldquo;sizeof（struct）&rdquo;的值是多少？这一个小问题，里面包含了很多内容。对此，你要把它的前因后果彻底的弄明白，这样在开发的时候才能得心应手。基于此，我们将《c语言深入学习》作为我们的第一个
c
项目，通过这个项目，
使
大家对c语言有根据深刻的认识。



   




   

主要资料



   项目的主要资料有：《c
缺陷和陷阱》，《
c
和指针》，《
c
专家编程》。其中《
c
专家编程》有一定的深度。





   其他的资料：可以有KO
进行搜集，然后提供给大家。资料形式不限，可以是图书、博文、技术文章等。





   另外，可以准备一份c
语言语法的参考书，

以便遇到
问题可以随时查阅。



   



知识点划分



   此项目的目的是深入的对c
语言的特性进行学习，其中很多是初学者不知道，或不完全知道的，容易犯错的知识点。每个知识点都有一个
checklist
，你可以检查一下你对这个知识点的掌握情况，另外，也可以知道此知识点的主要的内容。我们在对知识点的学习过程中，不单单是要消除这些疑问，更重要的是知道

&ldquo;为什么&rdquo;&mdash;&mdash;不但要知其然，还要知其所以然。




   


   字符串




   学习时间：1

.5
W（&ldquo;
W
&rdquo;周，下同）










   知识点checklist





   1、
strlen()函数的返回值是什么类型的？





   2、
字符串strlen()
的值，是否和他占据的内存空间相同？





   3、
你是否知道strcpy
函数存在的潜在风险？如何避免？





   4、
如果一个字符串没有字符串结束符，而调用str
开头的库函数，会发生什么？





   5、
Strcpy(),strcat(),strcmp(),strncpy(),strncat(),strncmp()内部到底是如何运行的？这些函数到底对源字符串和目标字符串做了些什么？你是否观察过它们运行时两个字符串内存的变化？





   6、
上面这些函数使用时，各有哪些需要注意的地方？




   7、
你会几种字符串查找操作？




   8、
c语言中有字符串这个数据类型吗？





   9、
对字符串进行操作的时候，是否为字符串结尾符预留存储位置？不然的话容易造成非常访问内存。








   


   数组




   学习时间：2W










   知识点checklist





   1、
你肯定知道，定义&ldquo;inta[10];
&rdquo;，
a[10]
这个元素是无效的。





   2、
你知道几种数组初始化的方法？




   3、
数组和指针有千丝万缕的联系而又不同，你是否对他们在不同情况下的使用进行过详细的总结？




   4、
&ldquo;intcalendar[10][20];
&rdquo;，这是一个什么样的数组？它拥有
10
数组类型的元素，还是
20
个？





   5、
&ldquo;inta[10];
&rdquo;，数组名
a
在本质上是一个什么？你是否打印过
a
的值？





   6、
你知道几种获取数组某元素的方法？




   7、
指针和数组相同吗？什么时候相同？什么时候不同？




   8、
用指针和下标访问数组元素，那种方式更快？








   


   结构体




   学习时间：1W










   知识点checklist





   1、
你知道什么是位域结构体吗？如何定义它？如何使用它？




   2、
你知道字节对齐对结构体占用内存空间大小的影响吗？如何计算结构体占用内存的大小？








   


   宏




   学习时间：1W










   知识点checklist





   1、
你知道宏的本质是什么吗？函数？语句？类型定义？或者其他？




   2、
你知道语言设计者为什么设计宏吗？这些原因目前是否仍然成立？




   3、
你会设计带有参数的宏吗？




   4、
你知道使用宏的参数的的时候的注意事项吗？




   5、
你会设计带有可变参数的宏吗？




   6、
你知道使用宏有什么劣势吗？




   7、
你有没有更好的替代方案？








   


   


   枚举




   学习时间：
0.5
W









   知识点checklist





   1、
是否可以指定枚举中各项的值？




   2、
如果不指定值，枚举的第一个值是多少？




   3、
枚举的值是否可以是负数？




   4、
定义枚举的时候，你是否专门定义了枚举的最小值和最大值？








   


   


   Switch




   学习时间：
0.5
W









   知识点checklist





   1、
switch(c)中的
c
的数据类型有哪些？





   2、
你是否在所有的switch
中都加了
default
语句？





   3、
是否在所有的case
中都加了
break
语句（一般情况的做法）？如果你不加
break
，将会发生什么？









   


   


   Static




   学习时间：1W










   知识点checklist





   1、
static的三个主要作用是什么？





   2、
static的修饰的局部变量是保存在什么地方的？全局变量哪
?





   3、
static修饰的全局变量和函数，在其他的文件中是否可以访问？如何访问？





   4、
你知道static
是
c
语言中实现封装和隐藏的利器吗？你是否经常使用？





   5、
定义在不同源文件中的static
全局变量，编译器是否允许他们的变量名称相同？他们在内存中的地址是否相同？函数那？









   


   


   const




   学习时间：1W









   知识点checklist





   1、
你是否经常使用const
来表明不能够被更改的变量？





   2、
你是否经常使用const
常量来代替宏？





   3、
下面四种情况，你知道是各表示什么意思吗？




   inti_value=10;




   constint*pvalue=&amp;
i_value




   intconst*pvalue=&amp;
i_value


int*constpvalue=&amp;
i_value




   constint*constpvalue=&amp;
i_value




   4、
你知道const
常量如何初始化吗？









   


   


   Sizeof




   学习时间：1W










   知识点checklist





   1、
对于字符数组，strlen
和
sizeof
的值是否相同？





   2、
S
izeof本质上是函数还是宏？





   3、
S
izeof的返回值是什么类型？









   


   


   


   指针




   学习时间：3W










   知识点checklist





   1、
&ldquo;int*p;
&rdquo;
&amp;p
，
p
，
*p
他们的值分别表示什么含义？





   2、
你定义的指针初始化了没？




   3、
你理解指针的指针的概念吗？你会使用吗？




   4、
&ldquo;int*pi_value;


pi_value
=0x100000;
&rdquo;pi_value+1
的值是是多少？





   5、
你会定义函数指针吗？




   6、
你会使用函数指针调用函数吗？




   7、
关于指针和数组，请参见知识点数组。








   


   


   动态分配内存




   学习时间：1W










   知识点checklist





   1、
动态分配的内存是保存在什么地方的？




   2、
什么情况下使用动态分配内存？




   3、
动态申请内存一定要释放，否则会内存泄露。你是否使用过内存检测工具？








   


   


   函数




   学习时间：1W










   知识点checklist





   1、
如何查看函数在内存中的地址？




   2、
如何给一个函数指针赋值？




   3、
你是否会定义可变入参函数




   4、
你是否可以区分函数的形参与实参？




   5、
如何定义函数名，以准确的表达函数的用途？




   6、
你是否使用const
来修饰函数入参和返回值，以表的特定的含义？





   7、
递归如何使用？








   


   变量




   学习时间：1W










   知识点checklist





   1、
全局变量，局部变量，常量分别保存在内存中的什么地方？




   2、
不同类型的变量，你是否知道其作用域？




   3、
全局变量和局部变量是否可以重名？你是否在这样做？




   4、
局部变量在函数退出后是否有效，为什么？




   5、
全局变量为什么不允许定义在头文件中？有何危害？








   


   链接
（linux
）





   学习时间：1W










   知识点checklist





   1、
链接位于编译过程的那个阶段？




   2、
动态链接库和静态链接库使用时有何区别？




   3、
如何
对
动态链接库
进行
动态加载
（不用重启程序而加载链接库）？




   4、
动态链接有何优点？




   5、
动态链接库中是否定义了非static
的全局变量？你是否知道这是一个非常危险的动作？





   6、
动态库中的全局变量（非static
）和函数（非
static
）是否可以和上层全局变量和函数重名？重名后会发生什么事情？









   


   


   运行时的数据结构
（linux
）





   学习时间：1W










   知识点checklist





   1、
你知道什么是段的概念吗？




   2、
可执行程序可以分为几个段？每个段保存的是什么内容？




   3、
如何查看可执行程序各个段的大小？




   4、
当函数被调用时发生了什么？




   5、
你有没有试过程序的栈空间最大有多大？程序超过此大小会发生什么？




   6、
你使用的系统的栈是向下生长的，还是向上生长的？








   


   Include




   学习时间：
0.5
W









   知识点checklist





   1、

如何避免对同一头文件的多次include
？









   


   


   声明




   学习时间：
1
W









   知识点checklist





   1、
什么是
声明
，什么是定义？




   2、
你是否会运用c
语言声明的优先级规则？









   


   


   关于
复杂度
：




   1、
软件的首要技术使命
是
管理复杂度。




   2、
优秀程序员的
一个特质
是将复杂的事情简单化，而非将简单的问题复杂化。所以，他们一般会选择简单的解决方案。




   3、
极尽机巧，复杂的解决方案，除了将新手搞得晕头转向之外，别无他用。




   4、
阅读优秀程序员的代码，是一种享受，你很少遇到思维的阻力，你可以尽情的享受简单之美。




   所以，对难以理解的语言特性，要慎用、少用，最好不用，而以简单的解决方案替代之。
但是，在做这些之前，你必须对这些知识点理解深刻。




   


   声明：




   1、
如果你发现有什么错误，请和我联系。




   2、
如果这些知识点你90%
以上都理解深刻，我希望你可以做此项目的
KE
。





   3、
如果你知道的比上面列出的还要多，或者还有你认为非常重要的，建议你也分享出来，对上面列举的内容进行优化。




   


   

组织形式。



   订出学习计划，还需要一系列的&ldquo;学习活动&rdquo;来完成此计划。




   在&ldquo;读S
计划&rdquo;中，我们为每个主要的学习目标（如：
HTTP
、
Javascript
）创建一个&ldquo;共同学习项目&rdquo;；一个项目由多个&ldquo;学习单元&rdquo;构成；每个学习单元有特定的&ldquo;学习资料&rdquo;。





   考虑到参与学习的人员的组织是松散的，所以通常把&ldquo;学习单元&rdquo;作为组织&ldquo;学习活动&rdquo;的最小单位。一个学习单元通常对应一周的时间，在一个学习单元内，会依次组织如下学习活动：




   1、
分头阅读本单元指定的&ldquo;学习资料&rdquo;。


鼓励参与者自行拓展阅读，并把自己认为有价值的资料推荐给其它成员。




   2、
KO负责把本单元学习的内容，整理成&ldquo;知识点&rdquo;。



每个知识点附带有一个Checklist
，可用于快速检查我们对这个知识点的掌握情况。





   3、
自由讨论（形式不限）




   4、
安排QQ
群定点、集中讨论和答疑





   5、
KO负责对本单元的学习过程进行总结，形成&ldquo;学习心得&rdquo;，供后人参考。





   6、
PO和
KE
对待提交的成果（知识点、
Checklist
、学习心得等）有审核的权力和义务。





   


   总结一下，一个&ldquo;共同学习项目&rdquo;的结构如下：




   总学习计划




   	
	
	
|-学习单元





   	
	
	
	
|-学习资料





   	
	
	
	
	
	
	
	
	
|-知识点





   	
	
	
	
	
	
	
	
	
	
	
	
|-CheckList




   	
	
	
	
	
	
|-学习心得





   	
	
	
	
	
	
|-衍生资料





   


   下一步工作




   1、
2009-10-3021:00-22:00
，在
QQ
群

93684322
中对此计划进行集中答疑。




   2、寻找合适的平台，来保障学习计划的顺利执行。我们会对博客、论坛、
QQ
群、
GoogleGroups
，
Googlesite
等各种可用的资源进行测试，看那种方式更利于大家共享学习心得并形成知识的积累。




   


   




时间计划。



   总时间：18.5W





   具体时间
见各个知识点。




   具体的时间，以及先后顺序可以调整。



   


   



学习过程中进行的实际的开发项目



   要先成为一名优秀的程序员，大量的、高质量的实践是必不可少的。先说
代码
量，李开复曾说过，大学毕业之前要有10
万行代码的编写经验。至于高质量，你的
10
万行代码，不能够是
1
万行代码的
10
次拷贝&mdash;&mdash;每次编程，你要能够从中学到知识，得到进步，这才是高质量的实践。





   目前我为此项目
初步
准备了三个项目：




   1）
FIFO
和L

IFO
的实现。这是一个相对简单的项目。




   2）
相对定时器的实现。这个项目有点难度。




   3）
绝对定时器的实现。难度同2
）。





   这三个项目，只做基础算法、通用函数库的实现，不做具体的产品开发。当然，这个过程中也可以考虑做一个具体的产品的开发，不过产品要选择好。




   这三个实际的开发项目和上面的学习项目并行，并不要求所有的学习项目成员必须参加此项目。项目采用团队开发，而采用个人开发，每个人都要开发一个。




   这三个项目的范围及需求，要和大家在一起讨论一下。