python初体验（1）&amp;mdash;&amp;mdash;基础篇我为什么学习python
  
   首先我的工作第一语言是c/c++（面向对象子集）。选择学习python一方面是因为看很多人都说python开发效率高，所以想验证一下；另一方面，Eric S. Raymond在文章：如何成为一名黑客 中对python的推荐。还有一方面，python的设计哲学：用一种方法，最好是只有一种方法来做一件事，这一点我比较认同。
  
   好了，我选择的入门资料是python简明教程。下面是我学习时的一些笔记和思考，上面有很明显的c和C++的痕迹。      控制结构：
     有c没有的自然字符串的概念。     不支持i++。我对此表示欢迎。++会诱导程序员新手犯错误。我在c中基本上抛弃了++。     python没有switch，可以使用if elif else来实现同样的功能。     while后可以跟一个else从句。     for i in range(1,5):，从1循环到5，但是不包括5。     break语句仍然可以停止循环，但是，停止后，不会执行else块。     continue和之前相同。     函数入参没有类型，如果实参和形参不符合会有什么后果，如何避免。如果类型不符合，会直接运行失败。     通过global可以告诉函数，变量属于函数之外。但是，不鼓励使用全局变量。它可以同时声明多个。     默认参数：和c++一样，用”= value”来表示。统一，它只可以为最后一个参数设定默认参数。      
        
   
   数据结构：
  
   字典：
  
   字典类似于二叉树，但是不知道字典内部使用的是什么算法。
  
   键值必须唯一，如果不唯一，添加的时候会发生什么？linux 二叉树是覆盖的。
  
   答案：如果字典中已经有了一个key，这个时候再添加，它会覆盖掉原先的value。对它来说是设置。这个和linux 二叉树倒是一致。
  
   和二叉树类似，键是不允许改变的。如果改变会发生什么后果。至少二叉树改变后，这个数的结构会败坏。而且，编译器是无法检测的。Python是否会检查？
  
   答案：是的，它在运行的时候会提示错误。因为他没有编译的概念。所以。。。
  
   是否可以弄一个变量作为关键字？
  
   答案：这样是可以的，运行也是没有问题的。但是如果更改这个关键字那？
  
   但是如果更改这个关键字那？
  
   答案：更改后发现字典并没有随着改变，说明他只是使用了这个变量的值，取他的值做常量，作为关键字，而不是使用变量作为关键字。
  
   字典的效率好不好，他的内部使用的是什么算法？二叉树，hash，还是其他？
  
   答案：哈希表。
  
   字典的健是否可以类型不同？
  
   答案：是可以的。
  
   字典是dict的对象，元组是tuple的对象，列表时list的对象。
    
        
   
   序列：
  
   序列的两个特点是索引操作符和切片操作符。一个是获取一个项目，一个是获取子序列。
  
   列表和元组都是序列。
  
   序列是从零开始的，这是数组一样。不过他居然可以是负数！？
  
   答案：负数的时候表示去最后的元素，-1表示最后一个。
  
   什么是切片？
  
   答案：就是在一个序列中获取一个子序列。对于切片，冒号是必须的，而数字不是必须的，如果没有数字，这表示从头开始或到结尾。全部没有数字表示整个序列。
  
   是否通过切片来为一个新的序列赋值？
  
   答案：可以的。
  
   如果获取元素超出范围会怎样？
  
   答案：运行出错。
  
   如果切片时超出范围会怎样？
  
   答案：本来以为会出错，居然没有，而只是显示为空。
  
   列表，元组，字符串都是序列，都可以用序列的方法来操作。
  
   
    
        
   
   元组
  
   和list唯一不同的是，他不可以改变。
  
   和c++不一样，元组和list里面可以存放不同类型的值。
  
   myempty = ()表示空的元组；
  
   myempty = (2，)必须加‘，’才可以表示只有一个元组；否则是对象。
  
   对象与引用
  
   当你创建一个对象并给它赋一个变量的时候，这个变量仅仅 引用 那个对象，而不是表示这个对象本身！也就是说，变量名指向你计算机中存储那个对象的内存。这被称作名称到对象的绑定。
  
   C中的指针我比较熟悉，他应该相当于指针，但是，从外观开不出什么。我感觉这个特性和语言的初衷有些偏差：可能会导致程序员出错。
  
   
  
   总的感觉：语法确实比较简单，比较容易入手。
  
   &#160;