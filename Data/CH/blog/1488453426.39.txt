python开发总结二最近在接触python，感觉python之所以开发效率高，可能有三个因素：

   1、语言表达能力强悍。

   2、支持很多高级的语言特性。

   3、第三方开源库非常的丰富。

   

   

   两本不错的书：

   《Python参考手册》：对Python各个标准模块，特性介绍的比较详细。

   《Python核心编程》：介绍的比较深入，关键是，对Python很多高级特性都有介绍。

   一个开源代码：openstack，关于云计算的，用Python写的，可以重点学习一下。
套接字编程：
   1、 函数的功能基本和c类似，唯一不同的地方在于当发生错误时，它不是通过返回值来告知的，而是通过触发异常，所以udp中的bind, recvfrom, sendto必须要进行捕捉异常。

   2、 套接字在垃圾收集的时候也会关闭。

   3、 获取网卡的IP： 

   s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)

   return socket.inet_ntoa(fcntl.ioctl(s.fileno(), 0X8915, struct.pack('256s', ethname[:15]))[20:24])

   

   

   
字符串的使用：
   1、 字符串中删除一个字串。没有直接提供这个方法，但是replace可以实现：

   &quot;abcdef&quot;.replace(&quot; &quot;, &quot;&quot;)

   同样的功能还有一个方法：translate。它的原有作用是将字符串中的某个字符替换为另外一个字符，注意，不是字符串。它的第一个参数是一个转换表。第二个参数是要删除的字符串。我们可以利用第二个参数del，实现这个功能。同时，第一个参数设置为None。

   translate可能更高效一点。另外，它的第二个参数可以使一个字符串，含有多个字符，这样就会删除多个。

   注意：translate方法不会对这个字符串操作，而是返回一个新的字符串。

   2、 strip方法：去除字符串两侧的空格，返回新的字符串。这个功能非常有用。

   3、 str中有一个函数，format，非常强大，有时间一定要看一下。

   4、 endswitch：检查字符串是否已某字符串结尾。startswith：检查是否已某字符串开头。

   5、 partition：它将字符串按指定的字符串分为三个部分，返回一个元组。第一个是指定字符串前面内容，第二个是指定字符串，第三个是指定字符串后面的内容。用于字符串解析非常好用。

   6、 split：将字符串按照某指定字符串分割成多个子字符串，返回一个分割后的列表。

   7、 join：将一个字符串列表中的各个字符串连接起来，中间插入指定的字符串。

   8、 find的返回值不是false和true，所以不可以直接用于if判断。需要判断if s.find(‘’) &gt;= 0:

   内建函数：
 
  
   string.capitalize()
  
   把字符串的第一个字符大写 
  
  
   string.center(width)
  
   返回一个原字符串居中,并使用空格填充至长度 width 的新串 
  
  
   string.count(str, beg=0, end=len(string))
  
   返回 str 在 string 里面出现的次数，如果 beg  或者 end 指返回指定范围内 str 出现的次数 
  
  
   string.decode(encoding='UTF-8', errors='strict')
  
    以 encoding 指定的编码格式解码 string，如果出错默认报ValueError  的异常，除非 errors 指定的是'ignore'或'replace' 
  
  
   string.encode(encoding='UTF-8',  errors='strict')
  
    以 encoding 指定的编码格式编码 string，如果出错默认报ValueError的异常， 除非errors指定的是'ignore'或者'repl
  
  
   string.endswith(obj, beg=0,  end=len(string))
  
   检查字符串是否以 obj 结束，如果 beg 或者 end 指定则检定的范围内是否以  obj 结束， 如果是， 返回True,否则返回Fa
  
  
   string.expandtabs(tabsize=8)
  
   把字符串 string 中的 tab 符号转为空格， 默认格数 tabsize 是 8. 
  
  
   string.find(str, beg=0, end=len(string))
  
    检测 str 是否包含在 string 中，如果 beg 和 end 指定范则检查是否包含在指定范围内，如果是返回开始的索引值，返回-1 
  
  
   string.index(str, beg=0, end=len(string))
  
     跟find()方法一样， 只不过如果str不在string中会报一个异
  
  
   string.isalnum()
  
   a, b, c  R如果string至少有一个字符并且所有字符都是字母或数字回 True,否则返回 False 
  
  
   string.isalpha()
  
   a, b, c  如果string至少有一个字符并且所有字符都是字母则返回T否则返回 False 
  
  
   string.isdecimal()
  
   b, c, d 如果 string 只包含十进制数字则返回  True 否则返回 False.
  
  
   string.isdigit()
  
   b, c 如果 string 只包含数字则返回 True 否则返回 False. 
  
  
   string.islower()
  
   b, c 如果 string 中包含至少一个区分大小写的字符，并且所有这些(大小写的)字符都是小写，则返回 True，否则返回 False 
  
  
   string.isnumeric()
  
   b, c, d 如果 string 中只包含数字字符，则返回  True，否则返回 False 
  
  
   string.isspace()
  
   b, c 如果 string 中只包含空格，则返回  True，否则返回 False. 
  
  
   string.istitle()
  
   b, c 如果 string 是标题化的(见 title())则返回 True，否则返回 False 
  
  
   string.isupper()
  
   b, c 如果 string 中包含至少一个区分大小写的字符， 并且所有这些(区分大小写的)字符都是大写，则返回 True，否则返回 False 
  
  
   string.join(seq)
  
   Merges (concatenates)以 string 作为分隔符，将 seq 中所有的元素(的字符串表示)合并为一个新的字符串 
  
  
   string.ljust(width)
  
   返回一个原字符串左对齐,并使用空格填充至长度 width 的新字符串 
  
  
   string.lower()
  
   转换 string 中所有大写字符为小写. 
  
  
   string.lstrip()
  
    截掉 string 左边的空格 
  
  
   string.partition(str)
  
   e 有点像 find()和 split()的结合体,从 str 出现的第一个位置起,把 字 符 串 string 分 成 一 个 3 元 素 的 元 组 (string_pre_str,str,string_post_str),如果 string 中不包含str 则 string_pre_str ==  string. 
  
  
   string.replace(str1, str2, num=string.count(str1))
  
   把 string 中的 str1 替换成 str2,如果 num 指定，  则替换不超过 num 次. 
  
  
   string.rfind(str, beg=0,end=len(string))
  
   类似于 find()函数，不过是从右边开始查找. 
  
  
   string.rindex( str,  beg=0,end=len(string))
  
     类似于 index()， 不过是从右边开始. 
  
  
   string.rjust(width)
  
   返回一个原字符串右对齐,并使用空格填充至长度 width 的新字符串 
  
  
   string.rpartition(str)
  
   e 类似于 partition()函数,不过是从右边开始查找. 
  
  
   string.rstrip()
  
    删除 string 字符串末尾的空格. 
  
  
   string.split(str=&quot;&quot;,  num=string.count(str))
  
    以 str 为分隔符切片 string，如果 num有指定值，则仅分隔 num 个子字符串 
  
  
   string.splitlines(num=string.count('\n'))
  
   b, c按照行分隔， 返回一个包含各行作为元素的列表， 如果 num 指定则仅切片 num 个行. 
  
  
   string.startswith(obj, beg=0,end=len(string))
  
   b, e检查字符串是否是以 obj 开头，是则返回 True，否则返回 False。如果beg 和 end 指定值，则在指定范围内检查. 
  
  
   string.strip([obj])
  
    在 string 上执行 lstrip()和 rstrip()
  
  
   string.swapcase()
  
    翻转 string 中的大小写 
  
  
   string.title()
  
   b, c  返回&quot;标题化&quot;的 string,就是说所有单词都是以大写开始，其余字母均为小写(见 istitle())
  
  
   string.translate(str, del=&quot;&quot;)
  
    根据str给出的表(包含256个字符)转换string的字符,要过滤掉的字符放到 del 参数中 
  
  
   string.upper()
  
   转换 string 中的小写字母为大写 
  
  
   string.zfill(width)
  
    返回长度为 width 的字符串，原字符串 string 右对齐，前面填充0 
 函数的使用：
   1、 函数的作用域：函数中定义一个变量，如果和全局变量重名，则全局变量名称就会被覆盖，也就是，这里对这个变量的更改，不会更改全局变量。但是，如果直接使用的话，是会使用全局变量的。同时，如果想要修改全局变量，需要制定是全局变量：global a

   2、 xrange用法和range一样，不过更为高效，因为他不会在内存中创建列表。所以，它只能用于循环。

   3、 如果函数没有return语句，则他的返回值为None。

   4、 关于函数的入参判断：如果如此为空，可能会发生异常。当异常发生后，可能会出现一种情况，一个事情做到了一半，就没有在进行下去，可能会造成内存泄露。这个问题如何解决？按照C的方式，每个入参都做判断是可以解决的，但是这样太麻烦了。而且看很多开源代码页没有这样来做。是不是有更好的方法？换一种思路，在调用之前确保不为空。在看看开源的代码是怎么做的。特别是openstack。
闭包的使用：
   1、 将组成函数的语句和语句的执行环境打包在一起形成的对象，成为闭包。

   2、 2.7之前的闭包不支持关键字nonlocal。3.0之后才支持。所以2.7前的闭包不可以使用nonlocal。

   3、 这样他就不可以对执行环境中的变量进行更改。

   
字典的使用：
   1、 字典的删除：直接使用del dict[k]可能会引发异常；首先判断k是否存在则效率有些低；使用异常使程序结构看起来不好。一个好的方法是pop(k, default v)。这个删除一个k项，并且返回。如果不存在返回默认的v。如果不加默认值，则会引发异常。

   2、 直接使用字典下标获取字典的值可能会引发一场。使用get方法则不会，如果不存在会返回none。另外，还可以设置不存在的默认值。

   3、 通过字典格式化字符串：print “value is %(key)s” % kvdict

   4、 item方法返回一个列表，列表中的元素是一个元组，第一个是key，第二个是value。比较好用的方法。

   5、 iteritem:返回的是一个迭代器。如果想要迭代这个字典，iteritem会比item更高效一点。

   6、 iterkeys则返回的是key的迭代器。keys返回的是key的list。

   7、 values返回值的列表，itervalues返回的是vlaue的迭代器

   8、 popitem会随机弹出（同时删除）一个项，则对于想要处理所有的元素，并且删除所有的元素是有帮助的。但是，如果没用元素的话，会抛出异常。

   9、 viewitems，viewkeys，viewvalues：这三个函数返回的是一个view对象。这个类似于视图。分别表示（key, value）pair的列表，key的列表，value的列表。一个优点是，如果字典发生变化，view会同步发生变化。在迭代过程中，字典不允许改变，否则会报异常。

   10、 

   

   
列表的使用：
   1、 列表的删除：不可以在遍历的过程中删除链表，这样会得到不可预知的后果。可以使用列表的过滤，来获得新的列表。

   2、 列表的过滤：

    def filterFun(node):#这个函数做了两个事情哎。

    node.cycleCount = node.cycleCount -1

    return node.cycleCount &lt; 0

    timeoutList = filter(filterFun, timerList)

    对timerList中的每个节点执行函数filterFun，根据filterFun返回的结果，为真的项组成一个新的列表。

   

   3、 map: kvlist = map(lambda x:x.strip(), kvlist)。同时，map可以接受多个列表，这个时候，函数也会接受多个参数，分别表示列表的每一个元素:kvlist = map(lambda x,y:x+y, [1,2,3], [4,5,6])

   如果函数为None，则相当于函数zip：

   zip([1,2,3],[4,5,6])

   [(1,4),(2,5),(3,6)]

   4、 生成器表达式：l = [node for node in xrange(5) if node - 3 &lt; 0]:这个的这个方法一定程度上可以替代过滤器和map。

   生成器表达式定义：

   [expr foriter_var in iterable if cond_expr]

   l = [2 for x inxrange(5)]#结果是生成一个含有5个2的列表

   5、 print(reduce(lambda x,y: x*y, [2 for x in xrange(38)]))

   上面的这个语句是计算2的38次方的值。它用到的是二元函数reduce。它第一次调用是将第一个和第二个元素做入参，后面用他们的结果做x，新的元素做y，最后返回值。

   另外，在获取一个38个2的列表也可以使用：[2] * 38。这可能更可读一点。

   6、 enumerate:对列表处理，返回的是列表的索引以及节点。

    for index, node in enumerate(timerList):

    if timerId == node.timerId and timerEvent ==node.timerEvent:

    del timerList[index]

   7、 列表的分片：[1,2,3,4]，l[1:-1]表示从索引从1到倒数第一个，不包含倒数第一个。如果要从某位置到最后，则应该：[1:]

   8、l[i:j:k]:表示切片，从i到j，步长为k。

   

   
迭代的使用：
   1、 迭代比直接使用列表遍历效率根据高。比如字典的keys函数返回的列表，以及iterkeys返回的迭代器。

   2、 reversed() 内建函数将返回一个反序访问的迭代器.参数必须为序列。

   3、 enumerate：返回一个迭代器：有索引值。

   4、 for eachLine inmyFile 替换for eachLine in myFile.readlines() :

   5、 注意：在迭代的过程中不可以更改序列，否则会引发问题，导致迭代出错。

   6、 可以自己定义一个类，可以迭代使用。不过需要定义方法：__iter__，next。

   7、 

   
生成器的使用：
   1、 yield关键字可以阻塞住函数的执行，并且保存当前的执行环境，整个包被称为生成器。

   2、 生成器可以通过调用生成器函数来创建。生成器函数是指包含关键字yield的函数。

   3、 生成器可以通过.next()来执行。每调用一次，就执行代码，直到遇到yield关键字停止，并且返回yield关键字后面的表达式的值。

   4、 可以通过调用send()函数来发送消息到生成器中。a = yield l：表示将send的入参赋值给a。

   5、 throw：允许客户端传入要抛出的任何异常。

   6、 和throw相同，只不过是要抛出一个特定的异常：GeneratorExit。

   
协程的使用：
   1、 协程（coroutine）是一个可以挂起，回复，并且有多个进入点的函数。

   2、 

   

   
XML的使用：
   1、 处理xml消息包比较好用的模块是xml.etree.ElementTree。

   2、 Element执行xml的根节点。

   3、 elem.find(path):查找根节点下面路径为path的子节点。

   4、 elem.findall(path):同样的子节点可能有多个，这里会返回一个列表。

   5、 elem.findtext(path):获取指定路径子节点的内容，这个我们会经常使用。

   6、 elem.get(key);获取属性的值。

   7、 上面如果没用，则返回none

   8、 elem.append:添加自节点。

   9、 elem.tag：返回tag值，也就是name。

   10、 elem.text:返回内容。

   11、 elem.attrib:返回属性的字典。

   12、 SubElement：生成一个节点，自动添加为父节点的子节点。

   13、 tostring：转化为xml文本字符串。但是不包括xml头。如果编码方式为UTF-8或者GB2312,gb2312都会产生xml头；如果是utf-8,则不会产生xml头

   14、 fromstring：从字符串转化为ElementTree对象。和XML同样的功能。

   15、 elem.set();设置属性值
time的使用：
   1、 time.sleep()函数函数具有c下sleep函数功能，单位为秒，但是可以接受浮点数。这样可以表示毫秒。

   2、 ti = datetime.datetime.now()可以显示当前的时间，包括当前的微秒也可以显示出来。两个的差值可以表示时间的间隔：microsecondLong = timeLong.seconds *1000000 + timeLong.microseconds。差值的成员是seconds和microseconds

   3、 

   
OO的使用：
   1、 如果不想让成员变量或者方法被外部使用（也就是private特性），可以以__双下划线开通。

   2、 Python也可以实现抽象基类，也就是接口：
 
  
   
  
   
 
   3、 __str__属性可以将对象转换为字符串，也就是调用print(object)是会打印的字符串。

   4、 __call__(魔法方法)可以将对象作为函数来调用。给它一个入参就可以。:

    def __call__(self, protoVer):

    return api.protoModules[protoVer].TimeTicks(

    (time.time()-self.birthday)*100

    )

   

   5、 对象实例是否可以删除？

   6、 Python参考手册要好好看一下。

   7、 python的static方法使用的是装饰器语法：@staticmethod.
模块的使用：
   1、 如果不想将模块的某些函数和变量被别的模块使用，可以以单下划线开头。这样import *是没有的，但是使用importmode，然后mode._fun仍然可以调用。在class中是以双下划线开头的。

   2、 

   
日志的使用：
   1、 日志的标准模块logging基本可以满足我的工作。

   2、 设置log的初始化工作：

   logging.basicConfig(

    filename = &quot;test.log&quot;,

    format = &quot;[%(asctime)s-%(levelname)s] %(message)s[%(filename)s,%(lineno)d]&quot;,

    level = logging.INFO,

    datefmt = &quot;%F %T&quot;)

   3、 除此之外，一个比较强大的功能就是过滤功能：可以针对级别，文件，行号等等很多的东西进行过滤。

   4、 

   
自省的使用：
   1、 type()可以查看对象的类型。这就是自省。也就是可以看看自己是什么类型。这个功能在动态语言中非常有用。

   2、 getattr函数：这是个非常有用的函数，它可以根据字符串，从模块，类，对象实例中获取属性和方法的应用并且调用。这个功能非常类似于c语言的函数指针，以及c++中的成员函数的指针。

   1）从模块中获取函数和成员

   import testfun

   tf = getattr(testfun, 'test')

   tstr = getattr(testfun, 'str')

   2）从类中获取属性和方法

   class test():

    tst = 2

    def __init__(self):

    self.abc = 1

    def method(self):

    print('in test.method', self)

    def __test(self):

    print('in test')

   tm = getattr(test, 'method’)#获取类方法method函数指针。因为没有实例，所以调用必须用下面的方法：

   t =test()

   tm(t)#申请一个实例，并且作为第一个参数传进去。

   tm = getattr(test, '__test’)#这里会报错，也就是无法获取私有方法。

   tabc = getattr(test, 'abc’)#这是错误的。无法获取。

   ttst = getattr(test, 'tst’)#这是可以的。。

   

   3）从对象实例中获取属性和方法

   t =test()

   tm = getattr(t, 'method')

   tm()#可以这样调用，而不用传入t实例。

   tabc = getattr(test, 'abc’)#可以获取实例的属性。

   3、 callable：函数表示某个对象是否可以调用。它和getattr结合起来，可以获取一个对象中的所有的method列表：

   methods = [methodfor method in dir[object] if callable(getattr(object, method))]

   4、 自省也叫放射。

   5、 exec(‘code’)：可以执行代码

   
配置文件读取的使用：
   1、 使用模块ConfigParser。实例如下：

   conf = ConfigParser()

   conf.read(&quot;snmp_agent.ini&quot;)

   

   print(conf.get(&quot;main&quot;, &quot;log_level&quot;))

   print(conf.getint(&quot;main&quot;, &quot;ne_agent_port&quot;))

   print(conf.get(&quot;main&quot;, &quot;ne_agent_qip&quot;))

   
异常的使用：
   1、 尽量少用。它会使程序难以理解，而且还会发生不可预知的情况，比如异常的发生使程序的状态变为一个未知状态。

   2、 可以寻找替代方案。

   3、 程序非常重要，不可以停止，可以在主循环包装在异常处理中运行。

   4、 打印出异常的信息，供后面的定位：log.error(traceback.format_exc())

   
类型系统
   1、 类型也是对象。比如：inttype = int,然后，n = inttype(‘256’)，这样可以把字符串转化为int值。

   2、 另外，是否可以把字符串转化为关键字，或者对象？比如，一个变量，abc,是否可以通过’abc’来引用？

   
文件的使用
   1、 打开使用函数open，模式和linux c类似。有一个不同的地方时，可以选择，直接操作磁盘还是操作内存。

   2、 readline可以读取一个文件的一行。

   3、 readlines：返回每一个列的列表。对应writelines。

   4、 文件迭代器：

   f = open(‘fliename’)

   for line in f:

    process(line)

    f.close()

    或者更简洁的：

    forline in open(filename):

    process(line)

   
数据库的使用
   1、 数据库中的字段使用的utf8格式编码，但是读取出来却是问号。这个问题的解决可以通过在查询的时候指定编码方式来解决，只要执行sql语句：Query_Execsql(pdb,&quot;SET NAMES 'utf8'&quot;);

   注意，这个需要在连接后马上进行。并且，在其他的操作中，会一直使用这种编码。除非再次更改。

   2、 

   
字节的使用
   1、 ord：可以见字符转化为int类型的值。

   2、 chr：ord的方向操作。可以见int类型值转换为字符。

   

   
字符编码的使用
   1、 encode是将Unicode转化为str，decode是将字符串转化为Unicode。所以，一个字符串要转化为另一种格式可以：

   s = ‘中文’

   s.decode(fromcodec).encode(tocodec)

   也可以直接使用：s.encode(tocodec)。这个时候，相当于默认调用了decode，并且使用的是默认的编码方式。

   
其他：
   1、 脚本语言的进程名称显示为：python ，如果一个服务器上有多个进程，那么将不易发现那个进程是哪个程序。可以使用第三方开源的库来解决这个问题：setproctitle.

   from setproctitle import setproctitle,getproctitle

   print('当前的进程名：%s' % getproctitle())

   setproctitle('proctitle')

   print('设置后的的进程名：%s' % getproctitle())

   2、